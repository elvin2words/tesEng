import { users, contactSubmissions, projects, installers, installerReviews, quoteSubmissions, emailTemplates, emailHistory, type User, type InsertUser, type ContactSubmission, type InsertContactSubmission, type Project, type InsertProject, type InsertInstaller, type Installer, type InsertInstallerReview, type InstallerReview, type InsertQuoteSubmission, type InsertEmailTemplate } from "@shared/schema3";
import { db } from "./db";
import { eq, desc } from "drizzle-orm";
import type { InsertUser, User, InsertContactSubmission, ContactSubmission, InsertProject, Project, InsertInstaller, Installer, InsertInstallerReview, InstallerReview } from "@shared/schema3";

// modify the interface with any CRUD methods
// you might need

export interface IStorage {
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission>;
  getProjects(): Promise<Project[]>;
  createProject(project: InsertProject): Promise<Project>;
  getInstallers(): Promise<Installer[]>;
  getInstallerById(id: number): Promise<Installer | undefined>;
  createInstaller(installer: InsertInstaller): Promise<Installer>;
  getInstallerReviews(installerId: number): Promise<InstallerReview[]>;
  createInstallerReview(review: InsertInstallerReview): Promise<InstallerReview>;

    // Quote management methods
  createQuoteSubmission(quote: InsertQuoteSubmission): Promise<any>;
  getQuoteSubmissions(): Promise<any[]>;
  getQuoteById(id: number): Promise<any | undefined>;
  updateQuoteStatus(id: number, status: string, assignedTo?: string): Promise<any>;

  // Email template management
  createEmailTemplate(template: InsertEmailTemplate): Promise<any>;
  getEmailTemplates(): Promise<any[]>;
  getEmailTemplate(templateType: string): Promise<any | undefined>;

  // Analytics and reporting
  getQuoteAnalytics(): Promise<any>;

}

export class DatabaseStorage implements IStorage {
  async getUser(id: number): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user || undefined;
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.username, username));
    return user || undefined;
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const [user] = await db
      .insert(users)
      .values(insertUser)
      .returning();
    return user;
  }

  async createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission> {
    const [contactSubmission] = await db
      .insert(contactSubmissions)
      .values(submission)
      .returning();
    return contactSubmission;
  }

  async getProjects(): Promise<Project[]> {
    return await db.select().from(projects);
  }

  async createProject(project: InsertProject): Promise<Project> {
    const [newProject] = await db
      .insert(projects)
      .values(project)
      .returning();
    return newProject;
  }

  async getInstallers(): Promise<Installer[]> {
    return await db.select().from(installers).where(eq(installers.isActive, true));
  }

  async getInstallerById(id: number): Promise<Installer | undefined> {
    const [installer] = await db.select().from(installers).where(eq(installers.id, id));
    return installer;
  }

  async createInstaller(installer: InsertInstaller): Promise<Installer> {
    const [newInstaller] = await db.insert(installers)
      .values(installer)
      .returning();
    return newInstaller;
  }

  async getInstallerReviews(installerId: number): Promise<InstallerReview[]> {
    return await db.select().from(installerReviews).where(eq(installerReviews.installerId, installerId));
  }

  async createInstallerReview(review: InsertInstallerReview): Promise<InstallerReview> {
    const [newReview] = await db.insert(installerReviews).values(review).returning();
    return newReview;
  }

  // Quote management methods
  async createQuoteSubmission(quote: InsertQuoteSubmission) {
    const aiScore = this.calculateAIPriorityScore(quote);
    const quoteWithScore = {
      ...quote,
      priorityScore: aiScore.score,
      urgencyLevel: aiScore.urgencyLevel,
      readinessToBuy: aiScore.readinessToBuy
    };

    const [newQuote] = await db.insert(quoteSubmissions).values(quoteWithScore).returning();

    // Auto-generate and send welcome email
    await this.sendAutoGeneratedEmail(newQuote, 'welcome');

    return newQuote;
  }

  async getQuoteSubmissions() {
    return await db.select().from(quoteSubmissions).orderBy(desc(quoteSubmissions.priorityScore), desc(quoteSubmissions.createdAt));
  }

  async getQuoteById(id: number) {
    const [quote] = await db.select().from(quoteSubmissions).where(eq(quoteSubmissions.id, id));
    return quote;
  }

  async updateQuoteStatus(id: number, status: string, assignedTo?: string) {
    const updates: any = { followUpStatus: status };
    if (assignedTo) updates.assignedTo = assignedTo;
    if (status === 'contacted') updates.lastContactDate = new Date();

    const [updatedQuote] = await db.update(quoteSubmissions)
      .set(updates)
      .where(eq(quoteSubmissions.id, id))
      .returning();

    return updatedQuote;
  }

  // Email template management
  async createEmailTemplate(template: InsertEmailTemplate) {
    const [newTemplate] = await db.insert(emailTemplates).values(template).returning();
    return newTemplate;
  }

  async getEmailTemplates() {
    return await db.select().from(emailTemplates).where(eq(emailTemplates.isActive, true));
  }

  async getEmailTemplate(templateType: string) {
    const [template] = await db.select().from(emailTemplates)
      .where(eq(emailTemplates.templateType, templateType))
      .where(eq(emailTemplates.isActive, true));
    return template;
  }

  // AI Priority Scoring System
  private calculateAIPriorityScore(quote: InsertQuoteSubmission) {
    let score = 0;
    let urgencyLevel = 'low';
    let readinessToBuy = 'low';

    // Location scoring (higher for urban areas)
    const highValueLocations = ['harare', 'bulawayo', 'mutare', 'gweru', 'cape town', 'johannesburg', 'nairobi', 'lagos', 'accra'];
    if (highValueLocations.some(city => quote.location.toLowerCase().includes(city))) {
      score += 30;
    }

    // Project type scoring
    const projectTypeScores: { [key: string]: number } = {
      'commercial': 40,
      'industrial': 50,
      'mining': 45,
      'residential': 25,
      'agricultural': 35
    };
    score += projectTypeScores[quote.projectType.toLowerCase()] || 20;

    // Budget analysis
    if (quote.estimatedBudget) {
      const budgetValue = this.extractBudgetValue(quote.estimatedBudget);
      if (budgetValue > 50000) score += 40;
      else if (budgetValue > 20000) score += 30;
      else if (budgetValue > 10000) score += 20;
      else score += 10;

      readinessToBuy = budgetValue > 20000 ? 'high' : budgetValue > 10000 ? 'medium' : 'low';
    }

    // System specifications provided (indicates seriousness)
    if (quote.systemSpecs && quote.systemSpecs.length > 100) {
      score += 25;
      readinessToBuy = readinessToBuy === 'low' ? 'medium' : 'high';
    }

    // Message urgency indicators
    if (quote.message) {
      const urgentKeywords = ['urgent', 'asap', 'immediately', 'emergency', 'critical', 'soon'];
      const readyKeywords = ['ready', 'budget approved', 'install', 'purchase', 'buy now'];

      if (urgentKeywords.some(keyword => quote.message!.toLowerCase().includes(keyword))) {
        score += 20;
        urgencyLevel = 'high';
      }

      if (readyKeywords.some(keyword => quote.message!.toLowerCase().includes(keyword))) {
        score += 25;
        readinessToBuy = 'high';
      }
    }

    // Company vs individual (B2B typically higher value)
    if (quote.company && quote.company.trim().length > 0) {
      score += 15;
    }

    // Phone number provided (higher engagement likelihood)
    if (quote.phone && quote.phone.trim().length > 0) {
      score += 10;
    }

    // Determine urgency level based on score
    if (score >= 80) urgencyLevel = 'high';
    else if (score >= 50) urgencyLevel = 'medium';

    return { score, urgencyLevel, readinessToBuy };
  }

  private extractBudgetValue(budgetString: string): number {
    const numbers = budgetString.match(/\d+/g);
    if (!numbers) return 0;

    const value = parseInt(numbers.join(''));

    // Handle different currencies and formats
    if (budgetString.toLowerCase().includes('k') || budgetString.toLowerCase().includes('thousand')) {
      return value * 1000;
    }
    if (budgetString.toLowerCase().includes('m') || budgetString.toLowerCase().includes('million')) {
      return value * 1000000;
    }

    return value;
  }

  // Auto-generated email system
  async sendAutoGeneratedEmail(quote: any, templateType: string) {
    const template = await this.getEmailTemplate(templateType);
    if (!template) {
      // Create default templates if they don't exist
      await this.createDefaultEmailTemplates();
      return;
    }

    const personalizedContent = this.personalizeEmailContent(template.content, quote);
    const personalizedSubject = this.personalizeEmailContent(template.subject, quote);

    // Log email to history
    await db.insert(emailHistory).values({
      quoteId: quote.id,
      templateType,
      subject: personalizedSubject,
      content: personalizedContent,
      sentTo: quote.email
    });

    // In a real implementation, you would integrate with an email service like SendGrid, Mailgun, etc.
    console.log(`📧 Auto-generated email sent to ${quote.email}:`, {
      subject: personalizedSubject,
      type: templateType,
      priorityScore: quote.priorityScore
    });

    return { subject: personalizedSubject, content: personalizedContent };
  }

  private personalizeEmailContent(content: string, quote: any): string {
    return content
      .replace(/\{firstName\}/g, quote.firstName || 'Valued Customer')
      .replace(/\{lastName\}/g, quote.lastName || '')
      .replace(/\{company\}/g, quote.company || '')
      .replace(/\{projectType\}/g, quote.projectType || 'solar project')
      .replace(/\{location\}/g, quote.location || '')
      .replace(/\{systemSpecs\}/g, quote.systemSpecs || 'your solar system requirements');
  }

  async createDefaultEmailTemplates() {
    const defaultTemplates = [
      {
        templateType: 'welcome',
        subject: 'Thank you for your solar inquiry, {firstName}!',
        content: `Dear {firstName} {lastName},

Thank you for contacting TES Engineering Solutions about your {projectType} project in {location}.

We've received your inquiry and our team is reviewing your requirements. Based on the information provided, we'll prepare a customized proposal that includes:

• System sizing and specifications
• Equipment recommendations
• Installation timeline
• Comprehensive pricing
• ROI projections

Our solar experts will contact you within 24 hours to discuss your project in detail.

Best regards,
TES Engineering Solutions Team

P.S. Did you know that our AI-powered sizing tool can provide instant estimates? Try it at: [your-website]/sizing-tool`,
        isActive: true
      },
      {
        templateType: 'follow_up',
        subject: 'Your Solar Project Update - {firstName}',
        content: `Hello {firstName},

I hope this email finds you well. I wanted to follow up on your solar project inquiry for {projectType} in {location}.

Our technical team has completed the preliminary analysis of your requirements. We're excited to share that your project shows excellent potential for significant energy savings.

Would you be available for a brief call this week to discuss:
• Your customized system recommendations
• Timeline and installation process
• Financing options available
• Next steps to move forward

Please let me know your preferred time, and I'll arrange a consultation with one of our senior solar engineers.

Looking forward to helping you achieve energy independence!

Best regards,
[Sales Rep Name]
TES Engineering Solutions`,
        isActive: true
      },
      {
        templateType: 'quote_explanation',
        subject: 'Your Solar Quote Breakdown - Everything You Need to Know',
        content: `Dear {firstName},

Thank you for your patience. Attached is your comprehensive solar quote for your {projectType} project.

Here's what your quote includes:

🔋 SYSTEM SPECIFICATIONS:
{systemSpecs}

💰 INVESTMENT BREAKDOWN:
• Equipment costs (panels, inverters, batteries)
• Installation and commissioning
• Permits and compliance
• 5-year comprehensive warranty

📈 YOUR BENEFITS:
• Estimated monthly savings: [calculated amount]
• Payback period: [calculated period]
• 20-year savings projection
• Environmental impact reduction

❓ NEXT STEPS:
1. Review the attached detailed proposal
2. Schedule a site visit for final measurements
3. Secure your installation slot with a deposit
4. Begin the permitting process

Have questions? Reply to this email or call us directly. Our team is here to make your transition to solar energy smooth and profitable.

Best regards,
TES Engineering Solutions Team`,
        isActive: true
      }
    ];

    for (const template of defaultTemplates) {
      await this.createEmailTemplate(template);
    }
  }

  // Analytics and reporting
  async getQuoteAnalytics() {
    const quotes = await this.getQuoteSubmissions();

    const analytics = {
      totalQuotes: quotes.length,
      highPriority: quotes.filter(q => q.priorityScore >= 80).length,
      mediumPriority: quotes.filter(q => q.priorityScore >= 50 && q.priorityScore < 80).length,
      lowPriority: quotes.filter(q => q.priorityScore < 50).length,
      pendingFollowUp: quotes.filter(q => q.followUpStatus === 'pending').length,
      contacted: quotes.filter(q => q.followUpStatus === 'contacted').length,
      converted: quotes.filter(q => q.followUpStatus === 'converted').length,
      byProjectType: this.groupByField(quotes, 'projectType'),
      byLocation: this.groupByField(quotes, 'location'),
      averageScore: quotes.reduce((sum, q) => sum + q.priorityScore, 0) / quotes.length || 0
    };

    return analytics;
  }

  private groupByField(items: any[], field: string) {
    return items.reduce((acc, item) => {
      const key = item[field] || 'Unknown';
      acc[key] = (acc[key] || 0) + 1;
      return acc;
    }, {});
  }
}

export const storage = new DatabaseStorage();